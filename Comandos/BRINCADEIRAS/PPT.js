const { EmbedBuilder, ApplicationCommandType, ApplicationCommandOptionType, ButtonBuilder,
     ActionRowBuilder, ButtonStyle } = require("discord.js")
const { QuickDB } = require('quick.db')
const db = new QuickDB();
const op√ß√µes = [
    { name: 'Pedra', emoji: 'ü™®', ganha: 'Tesoura'  },
    { name: 'Papel', emoji: 'üìÑ', ganha: 'Pedra'  },
    { name: 'Tesoura', emoji: '‚úÇÔ∏è', ganha: 'Papel'  }
]

module.exports = {
  name: "pedra-papel-tesoura", // Coloque o nome do comando
  description: "„Äé BRINCADEIRAS „ÄèCome√ßa um jogo de pedra papel e tesoura.", // Coloque a descri√ß√£o do comando
  type: ApplicationCommandType.ChatInput,
  options: [
    {
      name: 'usu√°rio',
      description: `Qual usu√°rio deseja jogar junto?`,
      type: ApplicationCommandOptionType.User,
      required: true,
    },
  ],

  run: async (client, interaction) => {
    //if(interaction.user.id === '1052573925588078596') return interaction.reply(`J√° jogou muito`)
    const usu√°rio = interaction.options.getUser('usu√°rio')
    if(interaction.user.id === usu√°rio.id) return interaction.reply({content: `Voc√™ n√£o pode jogar pedra papel e tesoura consigo mesmo!`, ephemeral: true})
    if(usu√°rio.bot) return interaction.reply({content: `Voc√™ n√£o pode jogar pedra papel e tesoura com um bot!`, ephemeral: true});

    let vezesGanhadasInteraction = await db.get(`vezesGanhadas_${interaction.user.id}_${usu√°rio.id}`)
    let vezesGanhadasUsu√°rio = await db.get(`vezesGanhadas_${usu√°rio.id}_${interaction.user.id}`)

    !vezesGanhadasInteraction ? await db.set(`vezesGanhadas_${interaction.user.id}_${usu√°rio.id}`, 0) : null;
    !vezesGanhadasUsu√°rio ? await db.set(`vezesGanhadas_${usu√°rio.id}_${interaction.user.id}`, 0) : null;

    const embed = new EmbedBuilder()
    .setTitle('ü™®üìÑ‚úÇÔ∏è | Pedra, papel e tesoura')
    .setDescription(`Turno atual: ${usu√°rio}`)
    .setColor('Yellow')
    .setTimestamp(new Date());

    const buttons = op√ß√µes.map((c) => {
        return new ButtonBuilder()
        .setCustomId(c.name)
        .setLabel(c.name)
        .setStyle(ButtonStyle.Primary)
        .setEmoji(c.emoji)
    });

    const row = new ActionRowBuilder().addComponents(buttons);

    const reply = await interaction.reply({content: `${usu√°rio}, voc√™ foi desafiado a jogar pedra papel e tesoura pelo ${interaction.user}!\nPara participar, clique em algum dos bot√µes abaixo.`, embeds: [embed], components: [row]})

    const collUsu√°rio = await reply.awaitMessageComponent({
        filter: (i) => i.user.id === usu√°rio.id,
        time: 60*1000,
    }).catch(async (err) => {
        embed.setDescription(`Game over! O ${usu√°rio} n√£o deu nenhuma resposta.`);
        await reply.edit({ embeds: [embed], components: []});
    })

    if(!collUsu√°rio) return;

    const usu√°rioEscolha = op√ß√µes.find((guiw) => guiw.name === collUsu√°rio.customId);
    // console.log(`O usu√°rio ${usu√°rio} escolheu ${usu√°rioEscolha.name}. N√£o utilize a op√ß√£o ${usu√°rioEscolha.ganhar}`)

    await collUsu√°rio.reply({ content: `Voc√™ escolheu ${usu√°rioEscolha.name + usu√°rioEscolha.emoji}`, ephemeral: true });

    embed.setDescription(`Turno atual: ${interaction.user}.`)
    await reply.edit({content: `${interaction.user} agora √© seu turno!`, embeds: [embed]});

    const collInteraction = await reply.awaitMessageComponent({
        filter: (i) => i.user.id === interaction.user.id,
        time: 60*1000,
    }).catch(async (err) => {
        embed.setDescription(`Game over! O ${interaction.user} n√£o deu nenhuma resposta.`);
        await reply.edit({ embeds: [embed], components: []});
    })

    if(!collInteraction) return;

    const interactionEscolha = op√ß√µes.find((c) => c.name === collInteraction.customId);

    let resultado;

    if(usu√°rioEscolha.ganha === interactionEscolha.name) {
        await db.add(`vezesGanhadas_${usu√°rio.id}_${interaction.user.id}`, 1)
        let Alvaro = await db.get(`vezesGanhadas_${usu√°rio.id}_${interaction.user.id}`)
        let win;
        Alvaro == 1 ? win = `1 vez` : win = `${Alvaro} vezes`
        resultado = `${usu√°rio} ganhou! Ele (a) ganhou ${win} contra o (a) ${interaction.user}`
    }

    if(interactionEscolha.ganha === usu√°rioEscolha.name) {
        await db.add(`vezesGanhadas_${interaction.user.id}_${usu√°rio.id}`, 1)
        let Colak = await db.get(`vezesGanhadas_${interaction.user.id}_${usu√°rio.id}`)
        let win;
        Colak == 1 ? win = `1 vez` : win = `${Colak} vezes`
        resultado = `${interaction.user} ganhou! Ele (a) ganhou ${win} contra o (a) ${usu√°rio}`
    }
    interactionEscolha.name === usu√°rioEscolha.name ? resultado = `Empate!` : null
    
    embed.setDescription(`${usu√°rio} escolheu ${usu√°rioEscolha.name + ' ' + usu√°rioEscolha.emoji}\n${interaction.user} escolheu ${interactionEscolha.name + interactionEscolha.emoji}\n\n${resultado}`)

    reply.edit({embeds: [embed], components: []})

  }
}